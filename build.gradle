buildscript {
    repositories {
        maven { url 'https://dl.bintray.com/kotlin/dokka' }
        maven { url 'https://files.minecraftforge.net/maven' }
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.72'
    id 'org.jetbrains.dokka' version '0.10.1'
    id 'maven-publish'
    id 'java-library'
}

apply plugin: 'net.minecraftforge.gradle'

String packagesToken = new String(package_public_token.decodeBase64())

version = module_version
group = "com.projectessentials.core"
archivesBaseName = module_name

configurations {
    internal
    implementation.extendsFrom internal
}

minecraft {
    accessTransformer = file 'src/main/resources/META-INF/accesstransformer.cfg'
    mappings channel: forge_mappings_channel_type, version: forge_mappings_channel_version
}

repositories {
    maven { url 'https://kotlin.bintray.com/kotlinx' }
    maven { url 'https://libraries.minecraft.net' }
    mavenCentral()
    jcenter()
}

dependencies {
    minecraft "net.minecraftforge:forge:$forge_version"
    internal "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
    internal "org.jetbrains.kotlin:kotlin-stdlib-$kotlin_jdk_version_target:$kotlin_version"
    internal "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
    internal "org.json:json:$json_version"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/libs/docs"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task dokkaJar(type: Jar) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    classifier = 'javadoc'
    from tasks.dokka as Object
}

task modJar(type: Jar) {
    with tasks.jar
    from configurations.internal.collect { it.isDirectory() ? it : zipTree(it) }

    manifest {
        attributes([
                "Specification-Title"     : module_name,
                "Specification-Vendor"    : module_version,
                "Specification-Version"   : module_vendor,
                "Implementation-Title"    : module_name,
                "Implementation-Version"  : module_version,
                "Implementation-Vendor"   : module_vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    baseName = module_name + '-MOD'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : module_name,
                "Specification-Vendor"    : module_vendor,
                "Specification-Version"   : module_version,
                "Implementation-Title"    : module_name,
                "Implementation-Version"  : module_version,
                "Implementation-Vendor"   : module_vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    baseName = module_name + '-NoRT'
}

reobf {
    modJar {
        dependsOn jar
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

project.tasks['jar'].dependsOn project.tasks['dokka']
project.tasks['modJar'].dependsOn project.tasks['jar']

sourceCompatibility = targetCompatibility =
        compileJava.sourceCompatibility =
                compileJava.targetCompatibility = project_jvm_version_target

compileKotlin.kotlinOptions.jvmTarget =
        compileTestKotlin.kotlinOptions.jvmTarget = project_jvm_version_target

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri 'https://maven.pkg.github.com/projectessentials/projectessentials-core'
            credentials {
                username = System.getenv('GradleUser')
                password = System.getenv('GradlePass')
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            version = (module_version as String).split('\\+')[0]
            from components.java
            artifact sourcesJar
            artifact dokkaJar
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
}
